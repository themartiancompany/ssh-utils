#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

_global_variables() {
  override_quiet="y"
  out_file=""
  target_host=""
  target_hostname=""
  target_user=""
  target_port=""
  proxy_command=""
  proxy_address=""
  proxy_port=""
  proxy_command=""
  tunnel_local=""
  tunnel_remote=""
  color=""
  quiet="y"
}

_get_nc_cmd() {
  local \
    _address="${1}" \
    _port="${2}" \
    _cmd=()
  _cmd=(
      nc
        -X
          5
        -x
          "${_address}:${_port}"
        "%h"
        "%p"
  )
  echo \
    "${_cmd[*]}"
}

# Writes SSH configuration
_ssh_conf() {
  local \
    _out="${1}" \
    _host="${2}" \
    _hostname="${3}" \
    _user="${4}" \
    _port="${5}" \
    _proxy_address="${6}" \
    _proxy_port="${7}" \
    _proxy_command="${8}" \
    _tunnel_local="${9}" \
    _tunnel_remote="${10}" \
    _out \
    _cfg=()
  _cfg=(
    "Host ${_host}"
    "  HostName ${_hostname}"
    "  Port ${_port}"
    "  IdentityFile ${HOME}/.ssh/${_host}"
    "  User ${_user}"
  )
  if \
    [[ "${_tunnel_local}" != "" ]] || \
    [[ "${_tunnel_remote}" != "" ]]; then
    if \
      [[ "${_tunnel_remote}" == "" ]]; then
      _tunnel_remote="${_tunnel_local}"
    fi
    if [[ "${_tunnel_local}" == "" ]]; then
      _tunnel_local="${_tunnel_remote}"
    fi
    _cfg+=(
      "  RemoteForward ${_tunnel_local} localhost:${_tunnel_remote}"
    )
  fi
  if \
    [[ "${_hostname}" == *".onion" ]] || \
    [[ "${_proxy_address}" != "" ]]; then
    _cfg+=(
      "  VerifyHostKeyDNS no"
      "  ProxyCommand $( \
        _get_"${_proxy_command}"_cmd \
          "${_proxy_address}" \
          "${_proxy_port}")"
    )
  fi
  printf \
    '%s\n' \
    "${_cfg[@]}" > \
    "${_out}"
  chmod \
    600 \
    "${_out}"
}

_set_overrides() {
  _set_override \
    "proxy" \
    "command" \
    "nc"
  _set_override \
    "proxy" \
    "address" \
    ""
  _set_override \
    "proxy" \
    "port" \
    "9050"
  _set_override \
    "tunnel" \
    "local" \
    ""
  _set_override \
    "tunnel" \
    "remote" \
    ""
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}


# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
    IFS='' \
    read \
      -r \
      -d \
      '' \
      usagetext <<ENDUSAGETEXT || true
usage:
  ${app_name}
    [options] 
      <out_file>
      <target_host>
      <target_hostname>
      <target_user>
      <target_port>
  options:
     -m <proxy_command>   Proxy command
     -p <proxy_address>   Proxy address
     -P <proxy_port>      Proxy port
                          Default: $(_get "proxy" "port")
     -l <local_port>      Tunnel on given local port
                          Default: '$(_get "tunnel" "local")'
     -r <remote_port>     Tunnel on given remote port
                          Default: '$(_get "tunnel" "remote")'
     -h                   This message
     -c                   Enable color output
     -v                   Enable verbose output

  out file:               Path of the resulting configuration file
  target host             Name of the resulting host
  target hostname         Address
  target user:            User to connect to
  target port:            Port to connect to
ENDUSAGETEXT
    printf \
      '%s' \
      "${usagetext}"
    exit "${1}"
}

_globals
_global_variables

while getopts 'm:p:P:l:r:vh?' arg; do
  case "${arg}" in
    m) override_proxy_command="${OPTARG}" ;;
    p) override_proxy_address="${OPTARG}" ;;
    P) override_proxy_port="${OPTARG}" ;;
    l) override_tunnel_local="${OPTARG}" ;;
    r) override_tunnel_remote="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _usage 0 ;;
    *)
        _msg_error \
          "Invalid argument '${arg}'" 0
        _usage 0
        ;;
  esac
done
shift \
  $((OPTIND - 1))
if (( $# < 5 )); then
  _msg_error \
    "Missing argument." \
    0
  _usage 0
fi
out_file="${1}"
target_host="${2}"
target_hostname="${3}"
target_user="${4}"
target_port="${5}"
shift \
  5
_args=(
  "$@"
)
_set_overrides
_ssh_conf \
  "$(_get \
    "out" \
    "file")" \
  "$(_get \
    "target" \
    "host")" \
  "$(_get \
    "target" \
    "hostname")" \
  "$(_get \
    "target" \
    "user")" \
  "$(_get \
    "target" \
    "port")" \
  "$(_get \
    "proxy" \
    "address")" \
  "$(_get \
    "proxy" \
    "port")" \
  "$(_get \
    "proxy" \
    "command")" \
  "$(_get \
    "tunnel" \
    "local")" \
  "$(_get \
    "tunnel" \
    "remote")" \
  "${_args[@]}"

# vim:set sw=2 sts=-1 et:
